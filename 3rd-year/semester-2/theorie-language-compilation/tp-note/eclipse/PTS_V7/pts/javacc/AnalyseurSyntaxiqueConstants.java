/* Generated By:JavaCC: Do not edit this line. AnalyseurSyntaxiqueConstants.java */
package pts.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalyseurSyntaxiqueConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int BOOLEAN = 9;
  /** RegularExpression Id. */
  int DO = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int THEN = 12;
  /** RegularExpression Id. */
  int FALSE = 13;
  /** RegularExpression Id. */
  int IF = 14;
  /** RegularExpression Id. */
  int INTEGER = 15;
  /** RegularExpression Id. */
  int RETURN = 16;
  /** RegularExpression Id. */
  int TRUE = 17;
  /** RegularExpression Id. */
  int VOID = 18;
  /** RegularExpression Id. */
  int WHILE = 19;
  /** RegularExpression Id. */
  int PROGRAM = 20;
  /** RegularExpression Id. */
  int VAR = 21;
  /** RegularExpression Id. */
  int FUNCTION = 22;
  /** RegularExpression Id. */
  int ARRAY = 23;
  /** RegularExpression Id. */
  int OF = 24;
  /** RegularExpression Id. */
  int BEGIN = 25;
  /** RegularExpression Id. */
  int END = 26;
  /** RegularExpression Id. */
  int OR = 27;
  /** RegularExpression Id. */
  int AND = 28;
  /** RegularExpression Id. */
  int NOT = 29;
  /** RegularExpression Id. */
  int READ = 30;
  /** RegularExpression Id. */
  int WRITE = 31;
  /** RegularExpression Id. */
  int CASE = 32;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 33;
  /** RegularExpression Id. */
  int IDENTIFIER = 34;
  /** RegularExpression Id. */
  int LETTER_MIN = 35;
  /** RegularExpression Id. */
  int LETTER = 36;
  /** RegularExpression Id. */
  int DIGIT = 37;
  /** RegularExpression Id. */
  int LPAREN = 38;
  /** RegularExpression Id. */
  int RPAREN = 39;
  /** RegularExpression Id. */
  int LBRAC = 40;
  /** RegularExpression Id. */
  int RBRAC = 41;
  /** RegularExpression Id. */
  int SEMICOLON = 42;
  /** RegularExpression Id. */
  int COMMA = 43;
  /** RegularExpression Id. */
  int DOT = 44;
  /** RegularExpression Id. */
  int COLON = 45;
  /** RegularExpression Id. */
  int ASSIGN = 46;
  /** RegularExpression Id. */
  int GT = 47;
  /** RegularExpression Id. */
  int LT = 48;
  /** RegularExpression Id. */
  int EQ = 49;
  /** RegularExpression Id. */
  int LE = 50;
  /** RegularExpression Id. */
  int GE = 51;
  /** RegularExpression Id. */
  int NE = 52;
  /** RegularExpression Id. */
  int PLUS = 53;
  /** RegularExpression Id. */
  int MINUS = 54;
  /** RegularExpression Id. */
  int MUL = 55;
  /** RegularExpression Id. */
  int DIV = 56;
  /** RegularExpression Id. */
  int REM = 57;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"{\"",
    "\"}\"",
    "<token of kind 8>",
    "\"BOOLEAN\"",
    "\"DO\"",
    "\"ELSE\"",
    "\"THEN\"",
    "\"FALSE\"",
    "\"IF\"",
    "\"INTEGER\"",
    "\"RETURN\"",
    "\"TRUE\"",
    "\"VOID\"",
    "\"WHILE\"",
    "\"PROGRAM\"",
    "\"VAR\"",
    "\"FUNCTION\"",
    "\"ARRAY\"",
    "\"OF\"",
    "\"BEGIN\"",
    "\"END\"",
    "\"OR\"",
    "\"AND\"",
    "\"NOT\"",
    "\"READ\"",
    "\"WRITE\"",
    "\"CASE\"",
    "<INTEGER_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER_MIN>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\":=\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
  };

}
